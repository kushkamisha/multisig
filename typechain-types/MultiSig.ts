/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface MultiSigInterface extends utils.Interface {
  functions: {
    "execute(address,uint256,bytes,bytes32[],bytes32[],uint8[])": FunctionFragment;
    "isOwner(address)": FunctionFragment;
    "nonce()": FunctionFragment;
    "owners(uint256)": FunctionFragment;
    "threshold()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "execute",
    values: [
      string,
      BigNumberish,
      BytesLike,
      BytesLike[],
      BytesLike[],
      BigNumberish[]
    ]
  ): string;
  encodeFunctionData(functionFragment: "isOwner", values: [string]): string;
  encodeFunctionData(functionFragment: "nonce", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "owners",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "threshold", values?: undefined): string;

  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonce", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owners", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "threshold", data: BytesLike): Result;

  events: {};
}

export interface MultiSig extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MultiSigInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    execute(
      destination: string,
      value: BigNumberish,
      data: BytesLike,
      sigR: BytesLike[],
      sigS: BytesLike[],
      sigV: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isOwner(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    nonce(overrides?: CallOverrides): Promise<[BigNumber]>;

    owners(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    threshold(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  execute(
    destination: string,
    value: BigNumberish,
    data: BytesLike,
    sigR: BytesLike[],
    sigS: BytesLike[],
    sigV: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isOwner(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  nonce(overrides?: CallOverrides): Promise<BigNumber>;

  owners(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  threshold(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    execute(
      destination: string,
      value: BigNumberish,
      data: BytesLike,
      sigR: BytesLike[],
      sigS: BytesLike[],
      sigV: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    isOwner(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    nonce(overrides?: CallOverrides): Promise<BigNumber>;

    owners(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    threshold(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    execute(
      destination: string,
      value: BigNumberish,
      data: BytesLike,
      sigR: BytesLike[],
      sigS: BytesLike[],
      sigV: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isOwner(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    nonce(overrides?: CallOverrides): Promise<BigNumber>;

    owners(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    threshold(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    execute(
      destination: string,
      value: BigNumberish,
      data: BytesLike,
      sigR: BytesLike[],
      sigS: BytesLike[],
      sigV: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isOwner(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nonce(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owners(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    threshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
